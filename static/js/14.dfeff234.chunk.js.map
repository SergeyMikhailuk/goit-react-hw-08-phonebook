{"version":3,"file":"static/js/14.dfeff234.chunk.js","mappings":"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","sources":["components/ContactForm/ContactsForm.styled.ts","components/ContactForm/ContactForm.tsx","components/ContactList/ContactsList.styled.ts","components/ContactEditModal/index.tsx","components/ContactList/ContactList.tsx","components/Filter/Filter.styled.ts","components/Filter/Filter.tsx","containers/pages/Contacts/styled.ts","containers/pages/Contacts/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form as FormikForm } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  padding: 10px;\n  border: solid 1px green;\n  border-radius: 8px;\n\n  input {\n    margin-bottom: 8px;\n  }\n`;\n","import React from 'react';\nimport { Formik, Field, ErrorMessage, FormikHelpers } from 'formik';\nimport { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\nimport * as yup from 'yup';\n\nimport { useAddContactMutation, useGetContactsQuery } from 'store/contactsSlice';\nimport { Form } from './ContactsForm.styled';\n\nconst validationSchema = yup.object({\n  name: yup.string().required('Name is required'),\n  number: yup\n    .string()\n    .min(8)\n    .max(12)\n    .typeError('from 8 to 12 symbols')\n    .required('Number is required'),\n});\n\nconst initialValues: ContactsInitialValues = {\n  id: nanoid(),\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const { data: contacts } = useGetContactsQuery(undefined);\n  const [addContact, { isLoading: isAddingContact }] = useAddContactMutation();\n\n  const handleSubmit = (\n    values: ContactsInitialValues,\n    { resetForm }: FormikHelpers<ContactsInitialValues>\n  ) => {\n    const { name } = values;\n    const existName = contacts.find(\n      (contact: ContactsInitialValues) => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (existName) {\n      return Notiflix.Notify.failure(`${name} is already in contacts.`);\n    }\n    addContact(values);\n    resetForm({ values: { ...initialValues, id: nanoid() } });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={validationSchema}\n    >\n      <Form>\n        <label htmlFor=\"name\">Name</label>\n        <br />\n        <Field id=\"name\" name=\"name\" type=\"text\" />\n        <ErrorMessage name=\"name\" component=\"div\" />\n        <br />\n\n        <label htmlFor=\"number\">Number</label>\n        <br />\n        <Field id=\"number\" name=\"number\" type=\"tel\" />\n        <ErrorMessage name=\"number\" component=\"div\" />\n        <br />\n\n        <button type=\"submit\" disabled={isAddingContact}>\n          {isAddingContact ? 'Adding contact...' : 'Add Contact'}\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n\nexport type ContactsInitialValues = {\n  id: string;\n  name: string;\n  number: string;\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding-left: 10px;\n  span {\n    margin-right: 8px;\n  }\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n\n  :not(:last-of-type) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const ButtonsWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 4px;\n  margin-left: auto;\n`;\n","import React from 'react';\nimport { TextField, Button, Modal, Box } from '@mui/material';\nimport { Formik, Field, Form, FormikHelpers } from 'formik';\nimport * as yup from 'yup';\n\nimport { useUpdateContactMutation } from 'store/contactsSlice';\n\nconst modalStyle = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  boxShadow: 24,\n  p: 4,\n};\n\nconst validationSchema = yup.object({\n  name: yup.string().required('Name is required'),\n  number: yup.string().required('Number is required'),\n});\n\nconst ContactEditModal: React.FC<ModalProps> = ({ contact, onClose, open }) => {\n  const [updateContact] = useUpdateContactMutation();\n  if (!contact) {\n    return null;\n  }\n  const handleSubmit = async (values: Contact, { setSubmitting }: FormikHelpers<Contact>) => {\n    await updateContact({ contactId: contact.id, ...values });\n    setSubmitting(false);\n    onClose();\n  };\n\n  return (\n    <Modal open={open} onClose={onClose}>\n      <Box sx={modalStyle}>\n        <Formik initialValues={contact} onSubmit={handleSubmit} validationSchema={validationSchema}>\n          {({ isSubmitting }) => (\n            <Form>\n              <Field as={TextField} name=\"name\" label=\"Name\" fullWidth margin=\"normal\" />\n              <Field as={TextField} name=\"number\" label=\"Number\" fullWidth margin=\"normal\" />\n              <Button type=\"submit\" variant=\"contained\" disabled={isSubmitting}>\n                Update\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Box>\n    </Modal>\n  );\n};\n\nexport default ContactEditModal;\n\ntype ModalProps = {\n  onClose: () => void;\n  open: boolean;\n  contact?: Contact;\n};\n\ntype Contact = {\n  id: string;\n  name: string;\n  number: string;\n};\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { useGetContactsQuery, useRemoveContactMutation } from 'store/contactsSlice';\nimport { getFilter } from 'store/filterSlice';\n\nimport { ButtonsWrapper, List, ListItem } from './ContactsList.styled';\nimport ContactEditModal from '../ContactEditModal';\n\nconst ContactList = () => {\n  const [isOpenModal, setIsOpenModal] = useState(false);\n  const [currentContact, setCurrentContact] = useState<Contact>();\n\n  const { data: contacts } = useGetContactsQuery(undefined);\n  const [removeContact, { isLoading: isDeleting }] = useRemoveContactMutation();\n  const [removedContactId, setRemovedContactId] = useState('');\n  const filter = useSelector(getFilter);\n\n  const editContactHandler = (contact: Contact) => {\n    setIsOpenModal(true);\n    setCurrentContact(contact);\n  };\n\n  const onContactDelete = async (contactId: string) => {\n    removeContact(contactId);\n    setRemovedContactId(contactId);\n  };\n\n  const getFilteredContacts = () => {\n    if (!contacts) return;\n    if (!filter) return [...contacts];\n\n    const contactToLowerCase = filter.toLowerCase();\n    return [...contacts].filter(contact => contact.name.toLowerCase().includes(contactToLowerCase));\n  };\n  const filteredContacts = getFilteredContacts() || [];\n\n  useEffect(() => {\n    if (!isDeleting && removedContactId) setRemovedContactId('');\n  }, [removedContactId, isDeleting]);\n\n  return (\n    <>\n      <List>\n        {filteredContacts.map((contact, index) => (\n          <ListItem key={contact.id}>\n            <span>{index + 1}</span>\n            {contact.name}, {contact.number}\n            <ButtonsWrapper>\n              <button onClick={() => editContactHandler(contact)}>edit</button>\n              <button\n                type=\"button\"\n                onClick={() => onContactDelete(contact.id)}\n                disabled={isDeleting}\n              >\n                {contact.id === removedContactId ? 'deleting...' : 'delete'}\n              </button>\n            </ButtonsWrapper>\n          </ListItem>\n        ))}\n      </List>\n      <ContactEditModal\n        contact={currentContact}\n        onClose={() => setIsOpenModal(false)}\n        open={isOpenModal}\n      />\n    </>\n  );\n};\n\nexport default ContactList;\n\ntype Contact = {\n  id: string;\n  name: string;\n  number: string;\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  padding-left: 10px;\n  gap: 4px;\n`;\n\nexport const Input = styled.input`\n  max-width: 50%;\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getFilter, setFilter } from 'store/filterSlice';\n\nimport { Input, Label } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const onFilterList = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <Label>\n      Find contact by name\n      <Input type=\"text\" value={filter} onChange={onFilterList} />\n    </Label>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  width: 400px;\n  margin: 50px auto 0;\n  background-color: lightgray;\n  padding: 16px;\n  border-radius: 8px;\n`;\n","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nimport { Wrapper } from './styled';\n\nconst Contacts = () => (\n  <Wrapper>\n    <ContactForm />\n\n    <h2>Contacts</h2>\n    <Filter />\n    <ContactList />\n  </Wrapper>\n);\n\nexport default Contacts;\n"],"names":["Form","styled","FormikForm","_templateObject","_taggedTemplateLiteral","validationSchema","yup","name","required","number","min","max","typeError","initialValues","id","nanoid","ContactForm","data","contacts","useGetContactsQuery","undefined","addContact","isLoading","isAddingContact","useAddContactMutation","_jsx","Formik","onSubmit","handleSubmit","values","_ref","resetForm","find","contact","toLowerCase","Notiflix","failure","concat","children","_jsxs","htmlFor","Field","type","ErrorMessage","component","disabled","List","ul","ListItem","li","_templateObject2","ButtonsWrapper","div","_templateObject3","modalStyle","position","top","left","transform","width","bgcolor","boxShadow","p","onClose","open","updateContact","useUpdateContactMutation","Modal","Box","sx","async","_ref2","setSubmitting","contactId","_ref3","isSubmitting","as","TextField","label","fullWidth","margin","Button","variant","ContactList","isOpenModal","setIsOpenModal","useState","currentContact","setCurrentContact","removeContact","isDeleting","useRemoveContactMutation","removedContactId","setRemovedContactId","filter","useSelector","getFilter","filteredContacts","getFilteredContacts","contactToLowerCase","includes","useEffect","_Fragment","map","index","onClick","editContactHandler","onContactDelete","ContactEditModal","Label","Input","input","Filter","dispatch","useDispatch","value","onChange","e","setFilter","currentTarget","Wrapper","Contacts"],"sourceRoot":""}